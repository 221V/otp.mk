{"name":"OTP.MK","tagline":"Erlang Tools with Makefile API","body":"otp.mk\r\n======\r\n\r\nTiny Makefile-based Erlang/OTP and reltool/relx/rebar/mix compatible build solution.\r\nToday otp.mk costs us 42 LOC and depman.erl 30 LOC and we want to keep that size.\r\n\r\nOverview\r\n--------\r\n\r\nEveryone preffer its own Erlang build solution along with its favourite BEAM language.\r\nWe want to introduce our vision for maintaining Erlang projects. Doesn't matter you use\r\nraw OTP reltool or rebar/relx or even Elixir mix we want to hide implementation of those\r\ntools behind makefile otp.mk.\r\n\r\nCommands API\r\n============\r\n\r\nFrontend commands\r\n\r\n    make get-deps\t\tGet-Deps from rebar.config\r\n    make update-deps\t\tUpdate-Deps from rebar.config\r\n    make [compile]\t\tCompile Dependencies with rebar\r\n    make .applist\t\tGenerate Applications List\r\n    make clean\t\t\tClean BEAM Files\r\n    make console\t\tRun Apps in Dev Mode Console\r\n    make start\t\t\tStart bundle with run_erl in Dev Mode\r\n    make attach\t\t\tAttach to bundle with to_erl in Dev Mode\r\n    make release\t\tBuild Release with relx\r\n    make dialyzer\t\tRun OTP Dializer\r\n    make tar\t\t\tPack relx relase without ERTS\r\n    make ct\t\t\tRun Common Test suite\r\n    make eunit\t\t\tRun eunit\r\n\r\nThese commands also could be accessed via REST API in Voxoz CI LXC.\r\n\r\nBackends\r\n========\r\n\r\nWe cannot guarantee that underlying backends would be fixed. However we are\r\nopen to discuss best practice for resolving dependedcies, building and releasing\r\nErlang application bundles. One thing we should remember that our main\r\ncriteria is small size of otp.mk and clear design.\r\n\r\nResolving (get, update, clean)\r\n------------------------------\r\n\r\nThere are severals way to resolve dependencies: using rebar.config,\r\nusing mix.exs or using information based on *.app.src files.\r\nBasic resolving neeeded for determinig correct order of\r\napplication:start(App) for launching release in developer mode.\r\nWe are using reltool_server for that purposes in depman.erl.\r\n\r\n    rebar\r\n    mix\r\n    reltool\r\n\r\nAlso we need to fetch dependencies. We can do it manually by parsing rebar.config and performing git clone or\r\nrunning rebar/mix. We use both rebar and mix for fetching deps in mixed Elixir/Erlang projects.\r\n\r\nBuilding (compile, ct, dialyzer, eunit)\r\n---------------------------------------\r\n\r\nEach BEAM language use its own compiler, so for Elixir we need to use mix,\r\nfor Joxa we need to use joxa and for Erlang we can use rebar or compile:file/2.\r\nKnowing the build order we can use OTP copmiler with infromation from reltool.\r\nToday we use rebar/mix for building. But things are going to change.\r\n\r\n    mix\r\n    joxa\r\n    rebar\r\n    compile:file/2\r\n\r\nReleasing (release, tar)\r\n------------------------\r\n\r\nWe support all ways of releasing, but for keeping simple we have chosen high-level tool relx by Eric Merritt.\r\nIn case you are using raw \"rebar -f generate\" or \"relx\" releasing in development mode you should\r\nsubstitute all ebin folder with symlinks to appropriate ebin in apps/deps folder to make Rusty's\r\nsync or Synrc active work. relx.config is generating based on APPS RELEASE NODE COOKIE information.\r\n\r\n    relx\r\n    rebar -f generate\r\n    reltool\r\n\r\nYou need patching the release with relpatch.sh in order to make sync/active work.\r\nIn development mode bundles runned with \"make start\" or \"make console\" you don't need it \r\n\r\nControlling (start, stop, console, attach)\r\n------------------------------------------\r\n\r\nThere are two modes you can run application bundles.\r\n\r\n* **Development Mode** when you can inject modules into the running system,\r\nhandle code changes, staring using raw application:start/1. In that mode you can use\r\nmake start/stop/console/attach. Currently otp.mk uses the same way provided by\r\nrelease tools for attaching remote nodes with pipes: to_erl/run_erl.\r\n\r\n* **Release Mode** when you run application bundle as OTP release with\r\nits own boot loader script usually made with relx or rebar -f generate.\r\nIf you want git pull updates for code using active/sync file system\r\nwatchers you need to patch releases with relpatch.sh. In that mode use nodetool\r\nscript generated with release manager. Currently otp.mk uses relx.\r\n\r\nVariables\r\n---------\r\n\r\n    APPS        -- n2o n2o_sample cowboy erlydtl ranch gproc mimetypes\r\n    RELEASE     -- unirel\r\n    NODE        -- node@localhost\r\n    COOKIE      -- secret\r\n    ERL_ARGS    -- -args_file vm.args -config sys.config\r\n    RUN_DIR     -- .\r\n    LOG_DIR     -- logs\r\n    ROOTS       -- apps deps\r\n\r\nPrerequisites\r\n-------------\r\n\r\n* GNU make (BSD users have to use `gmake` instead of `make`)\r\n* $PATH should contain:\r\n\r\n```\r\njoxa\r\nelixir\r\nerlc\r\nmix\r\nrebar\r\nmake\r\nrelx\r\nto_erl\r\nrun_erl\r\n```\r\n\r\nSee real example of usage in https://github.com/5HT/skyline\r\n\r\nCredits\r\n-------\r\n\r\n* Vladimir Kirillov -- main author\r\n* Maxim Sokhatsky\r\n* Max Treskin\r\n* Peter Bruinsma\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}